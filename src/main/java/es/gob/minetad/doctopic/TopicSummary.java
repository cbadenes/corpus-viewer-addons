package es.gob.minetad.doctopic;

import es.gob.minetad.model.Stats;
import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.DBSCANClusterer;
import org.apache.commons.math3.ml.distance.DistanceMeasure;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * @author Badenes Olmedo, Carlos <cbadenes@fi.upm.es>
 */

public class TopicSummary {

    private static final Logger LOG = LoggerFactory.getLogger(TopicSummary.class);
    private final TopicHash hashQ1;
    private final TopicHash hashQ2;


    public TopicSummary(List<Double> topicDistribution) {
        Stats stats = new Stats(topicDistribution);
        this.hashQ1 = new TopicHash(topicDistribution, stats.getVariance());
        this.hashQ2 = new TopicHash(topicDistribution, stats.getDev());
    }

    public String getHashTopicsQ1() {
        return this.hashQ1.getGroups().get(0).id.replace("#"," ");
    }

    public String getHashTopicsQ2() {
        return this.hashQ2.getGroups().get(0).id.replace("#"," ");
    }

    public String getHashExclQ1() {
        return this.hashQ1.getGroups().get(this.hashQ1.getGroups().size()-1).id.replace("#"," ");
    }

    public String getHashExclQ2() {
        return this.hashQ2.getGroups().get(this.hashQ2.getGroups().size()-1).id.replace("#"," ");
    }

    public Integer getHashCodeQ1(){
        //TODO split by increment
        return this.hashQ1.getGroups().stream().map(tp -> tp.id).collect(Collectors.joining("-")).hashCode();
    }

    public Integer getHashCodeQ2(){
        //TODO split by increment
        return this.hashQ2.getGroups().stream().map(tp -> tp.id).collect(Collectors.joining("-")).hashCode();
    }

    public String getHashExpressionQ1(){
        //TODO split by increment
        return hashQ1.getGroups().stream().map(tp -> tp.id).collect(Collectors.joining("\n"));
    }

    public String getHashExpressionQ2(){
        //TODO split by increment
        return hashQ2.getGroups().stream().map(tp -> tp.id).collect(Collectors.joining("\n"));
    }



    private class TopicHash {
        private final DBSCANClusterer<TopicPoint> clusterer;
        private final List<TopicPoint> groups;

        public TopicHash(List<Double> topicDistribution, Double precision) {
            DistanceMeasure distanceMeasure = new MonoDimensionalDistanceMeasure();
            //double eps      = (1.0/topicDistribution.size())/precision;
            double eps      = precision;
            int minPts      = 0;
            this.clusterer  = new DBSCANClusterer<TopicPoint>(eps,minPts,distanceMeasure);


            List<TopicPoint> points = IntStream.range(0, topicDistribution.size()).mapToObj(i -> new TopicPoint("" + i, topicDistribution.get(i))).collect(Collectors.toList());
            List<Cluster<TopicPoint>> clusterList = clusterer.cluster(points);

            this.groups = new ArrayList<>();
            int totalPoints = 0;
            for(Cluster<TopicPoint> cluster: clusterList){
                Double score    = (cluster.getPoints().stream().map(p -> p.score).reduce((x,y) -> x+y).get()) / (cluster.getPoints().size());
                String label    = cluster.getPoints().stream().map(p -> "t"+p.id).sorted((x,y) -> -x.compareTo(y)).collect(Collectors.joining("#"));

                totalPoints += cluster.getPoints().size();

                groups.add(new TopicPoint(label,score));
            }
            if (totalPoints < topicDistribution.size()){
                List<TopicPoint> clusterPoints = clusterList.stream().flatMap(l -> l.getPoints().stream()).collect(Collectors.toList());
                List<TopicPoint> isolatedTopics = points.stream().filter(p -> !clusterPoints.contains(p)).collect(Collectors.toList());
                Double score = (isolatedTopics.stream().map(p -> p.score).reduce((x,y) -> x+y).get()) / (isolatedTopics.size());
                String label = isolatedTopics.stream().map(p -> "t"+p.id).sorted((x,y) -> -x.compareTo(y)).collect(Collectors.joining("#"));
                groups.add(new TopicPoint(label,score));
            }
            Collections.sort(groups, (a,b) -> -a.score.compareTo(b.score));
        }

        public DBSCANClusterer<TopicPoint> getClusterer() {
            return clusterer;
        }

        public List<TopicPoint> getGroups() {
            return groups;
        }


    }

    private class TopicPoint implements Clusterable{

        private final String id;
        private final Double score;

        public TopicPoint(String id, Double score) {
            this.id = id;
            this.score = score;
        }

        @Override
        public double[] getPoint() {
            return new double[]{score};
        }
    }

    private class MonoDimensionalDistanceMeasure implements DistanceMeasure{

        @Override
        public double compute(double[] p1, double[] p2) {
            return Math.abs(p1[0]-p2[0]);
        }
    }


    public static void main(String[] args) {

        //List<Double> vector = Arrays.asList

        List<Double> vector = Arrays.asList(0.01833976833976834,
                0.011583011583011584,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.03185328185328185,
                0.011583011583011584,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.01833976833976834,
                0.01833976833976834,
                0.004826254826254826,
                0.0250965250965251,
                0.004826254826254826,
                0.004826254826254826,
                0.0250965250965251,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.004826254826254826,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.01833976833976834,
                0.01833976833976834,
                0.011583011583011584,
                0.011583011583011584,
                0.01833976833976834,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.011583011583011584,
                0.004826254826254826,
                0.011583011583011584,
                0.004826254826254826,
                0.004826254826254826,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.3764478764478765,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826);

        TopicSummary topicSummary = new TopicSummary(vector);
        LOG.info("Hash Code: " + topicSummary.getHashCodeQ1());
        LOG.info("Hash Code: " + topicSummary.getHashCodeQ2());
        LOG.info("Hash Expression Q1: \n" + topicSummary.getHashExpressionQ1());
        LOG.info("Hash Expression Q2: \n" + topicSummary.getHashExpressionQ2());

    }

}
